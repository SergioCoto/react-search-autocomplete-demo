{"version":3,"sources":["sickdoodle.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","items","id","name","handleOnSearch","string","cached","console","log","handleOnSelect","item","handleOnFocus","className","style","width","margin","src","logo","alt","marginBottom","onSearch","onSelect","onFocus","autoFocus","marginTop","fontSize","showIcon","styling","height","border","borderRadius","backgroundColor","boxShadow","hoverBackgroundColor","color","fontFamily","iconColor","lineColor","placeholderColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0IAAAA,EAAOC,QAAU,IAA0B,wC,+LCyF5BC,MApFf,WAEE,IAAMC,EAAQ,CACZ,CACEC,GAAI,EACJC,KAAM,SAER,CACED,GAAI,EACJC,KAAM,cAER,CACED,GAAI,EACJC,KAAM,SAER,CACED,GAAI,EACJC,KAAM,OAER,CACED,GAAI,EACJC,KAAM,SAIJC,EAAiB,SAACC,EAAQC,GAC9BC,QAAQC,IAAIH,EAAQC,IAGhBG,EAAiB,SAAAC,GACrBH,QAAQC,IAAIE,IAGRC,EAAgB,WACpBJ,QAAQC,IAAI,YAGd,OACE,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,MAAO,CAACC,MAAO,IAAKC,OAAQ,KAC/B,yBAAKC,IAAKC,IAAMC,IAAI,OAAOL,MAAO,CAACM,aAAc,MACjD,yBAAKN,MAAO,CAACM,aAAc,KAA3B,6BACA,kBAAC,0BAAD,CACElB,MAAOA,EACPmB,SAAUhB,EACViB,SAAUZ,EACVa,QAASX,EACTY,WAAS,IAEX,yBAAKV,MAAO,CAACW,UAAW,KAAxB,+BAGF,yBAAKX,MAAO,CAACC,MAAO,IAAKC,OAAQ,KAC/B,wBAAIF,MAAO,CAACM,aAAc,GAAIM,SAAU,KAAxC,wBACA,yBAAKZ,MAAO,CAACM,aAAc,KAA3B,6BACA,kBAAC,0BAAD,CACElB,MAAOA,EACPmB,SAAUhB,EACViB,SAAUZ,EACVa,QAASX,EACTe,UAAU,EACVC,QAAS,CACPC,OAAQ,OACRC,OAAQ,sBACRC,aAAc,MACdC,gBAAiB,QACjBC,UAAW,OACXC,qBAAsB,aACtBC,MAAO,YACPT,SAAU,OACVU,WAAY,QACZC,UAAW,QACXC,UAAW,aACXC,iBAAkB,eAGtB,yBAAKzB,MAAO,CAACW,UAAW,KAAxB,kCCtEUe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a90cb8cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sickdoodle.d8981db5.png\";","import React from 'react';\r\nimport './App.css';\r\nimport logo from \"./sickdoodle.png\";\r\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\r\n\r\nfunction App() {\r\n\r\n  const items = [\r\n    {\r\n      id: 0,\r\n      name: \"Cobol\",\r\n    },\r\n    {\r\n      id: 1,\r\n      name: \"JavaScript\"\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Basic\"\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"PHP\"\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Java\"\r\n    },\r\n  ];\r\n\r\n  const handleOnSearch = (string, cached) => {\r\n    console.log(string, cached);\r\n  }\r\n\r\n  const handleOnSelect = item => {\r\n    console.log(item);\r\n  }\r\n\r\n  const handleOnFocus = () => {\r\n    console.log(\"Focused\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div style={{width: 400, margin: 20}}>\r\n          <img src={logo} alt=\"logo\" style={{marginBottom: 20}} />\r\n          <div style={{marginBottom: 20}}>Try to type \"JavaScript\".</div>\r\n          <ReactSearchAutocomplete\r\n            items={items}\r\n            onSearch={handleOnSearch}\r\n            onSelect={handleOnSelect}\r\n            onFocus={handleOnFocus}\r\n            autoFocus\r\n          />\r\n          <div style={{marginTop: 20}}>This text will be covered!</div>\r\n        </div>\r\n\r\n        <div style={{width: 400, margin: 20}}>\r\n          <h2 style={{marginBottom: 20, fontSize: 30}}>My custom searchbox!</h2>\r\n          <div style={{marginBottom: 20}}>Try to type \"JavaScript\".</div>\r\n          <ReactSearchAutocomplete\r\n            items={items}\r\n            onSearch={handleOnSearch}\r\n            onSelect={handleOnSelect}\r\n            onFocus={handleOnFocus}\r\n            showIcon={false}\r\n            styling={{\r\n              height: \"34px\",\r\n              border: \"1px solid darkgreen\",\r\n              borderRadius: \"4px\",\r\n              backgroundColor: \"white\",\r\n              boxShadow: \"none\",\r\n              hoverBackgroundColor: \"lightgreen\",\r\n              color: \"darkgreen\",\r\n              fontSize: \"16px\",\r\n              fontFamily: \"Arial\",\r\n              iconColor: \"green\",\r\n              lineColor: \"lightgreen\",\r\n              placeholderColor: \"darkgreen\",\r\n            }}\r\n          />\r\n          <div style={{marginTop: 20}}>This text will be covered!</div>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}