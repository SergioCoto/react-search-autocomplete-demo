{"version":3,"sources":["sickdoodle.png","App.js","serviceWorker.js","index.js"],"names":["App","handleOnSearch","string","cached","console","log","handleOnSelect","item","handleOnFocus","className","style","width","margin","src","logo","alt","marginBottom","items","id","name","onSearch","onSelect","onFocus","autoFocus","marginTop","fontSize","title","description","fuseOptions","keys","resultStringKeyName","showIcon","styling","height","border","borderRadius","backgroundColor","boxShadow","hoverBackgroundColor","color","fontFamily","iconColor","lineColor","placeholderColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAAe,G,YAAA,IAA0B,wC,OCsH1BA,MAjHf,WACE,IA8CMC,EAAiB,SAACC,EAAQC,GAC9BC,QAAQC,IAAIH,EAAQC,IAGhBG,EAAiB,SAACC,GACtBH,QAAQC,IAAIE,IAGRC,EAAgB,WACpBJ,QAAQC,IAAI,YAGd,OACE,qBAAKI,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAlC,UACE,qBACEC,IAAKC,EACLC,IAAI,OACJL,MAAO,CAAEC,MAAO,OAAQK,aAAc,MAExC,qBAAKN,MAAO,CAAEM,aAAc,IAA5B,uCACA,cAAC,0BAAD,CACEC,MArEI,CACZ,CACEC,GAAI,EACJC,KAAM,SAER,CACED,GAAI,EACJC,KAAM,cAER,CACED,GAAI,EACJC,KAAM,SAER,CACED,GAAI,EACJC,KAAM,OAER,CACED,GAAI,EACJC,KAAM,SAmDAC,SAAUnB,EACVoB,SAAUf,EACVgB,QAASd,EACTe,WAAS,IAEX,qBAAKb,MAAO,CAAEc,UAAW,IAAzB,2CAEF,sBAAKd,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAlC,UACE,oBAAIF,MAAO,CAAEM,aAAc,GAAIS,SAAU,IAAzC,kCAGA,qBAAKf,MAAO,CAAEM,aAAc,IAA5B,oCACA,cAAC,0BAAD,CACEC,MA5DS,CACjB,CACEC,GAAI,EACJQ,MAAO,UACPC,YAAa,sBAEf,CACET,GAAI,EACJQ,MAAO,qBACPC,YAAa,gDAEf,CACET,GAAI,EACJQ,MAAO,eACPC,YAAa,gDAEf,CACET,GAAI,EACJQ,MAAO,UACPC,YAAa,uCA0CPC,YAAa,CAAEC,KAAM,CAAC,QAAS,gBAC/BC,oBAAoB,QACpBV,SAAUnB,EACVoB,SAAUf,EACVgB,QAASd,EACTuB,UAAU,EACVC,QAAS,CACPC,OAAQ,OACRC,OAAQ,sBACRC,aAAc,MACdC,gBAAiB,QACjBC,UAAW,OACXC,qBAAsB,aACtBC,MAAO,YACPd,SAAU,OACVe,WAAY,QACZC,UAAW,QACXC,UAAW,aACXC,iBAAkB,eAGtB,qBAAKjC,MAAO,CAAEc,UAAW,IAAzB,iDCnGUoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ed4005e3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sickdoodle.d7740801.png\";","import React from \"react\";\nimport \"./App.css\";\nimport logo from \"./sickdoodle.png\";\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\n\nfunction App() {\n  const items = [\n    {\n      id: 0,\n      name: \"Cobol\",\n    },\n    {\n      id: 1,\n      name: \"JavaScript\",\n    },\n    {\n      id: 2,\n      name: \"Basic\",\n    },\n    {\n      id: 3,\n      name: \"PHP\",\n    },\n    {\n      id: 4,\n      name: \"Java\",\n    },\n  ];\n\n  const movieItems = [\n    {\n      id: 0,\n      title: \"Titanic\",\n      description: \"A movie about love\",\n    },\n    {\n      id: 1,\n      title: \"Dead Poets Society\",\n      description: \"A movie about poetry and the meaning of life\",\n    },\n    {\n      id: 2,\n      title: \"Terminator 2\",\n      description: \"A robot from the future is sent back in time\",\n    },\n    {\n      id: 3,\n      title: \"Alien 2\",\n      description: \"Ripley is back for a new adventure\",\n    },\n  ];\n\n  const handleOnSearch = (string, cached) => {\n    console.log(string, cached);\n  };\n\n  const handleOnSelect = (item) => {\n    console.log(item);\n  };\n\n  const handleOnFocus = () => {\n    console.log(\"Focused\");\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{ width: 200, margin: 20 }}>\n          <img\n            src={logo}\n            alt=\"logo\"\n            style={{ width: \"100%\", marginBottom: 20 }}\n          />\n          <div style={{ marginBottom: 20 }}>Try to type \"JavaScript\".</div>\n          <ReactSearchAutocomplete\n            items={items}\n            onSearch={handleOnSearch}\n            onSelect={handleOnSelect}\n            onFocus={handleOnFocus}\n            autoFocus\n          />\n          <div style={{ marginTop: 20 }}>This text will be covered!</div>\n        </div>\n        <div style={{ width: 200, margin: 20 }}>\n          <h2 style={{ marginBottom: 20, fontSize: 30 }}>\n            My custom searchbox!\n          </h2>\n          <div style={{ marginBottom: 20 }}>Try to type \"Titanic\".</div>\n          <ReactSearchAutocomplete\n            items={movieItems}\n            fuseOptions={{ keys: [\"title\", \"description\"] }}\n            resultStringKeyName=\"title\"\n            onSearch={handleOnSearch}\n            onSelect={handleOnSelect}\n            onFocus={handleOnFocus}\n            showIcon={false}\n            styling={{\n              height: \"34px\",\n              border: \"1px solid darkgreen\",\n              borderRadius: \"4px\",\n              backgroundColor: \"white\",\n              boxShadow: \"none\",\n              hoverBackgroundColor: \"lightgreen\",\n              color: \"darkgreen\",\n              fontSize: \"16px\",\n              fontFamily: \"Arial\",\n              iconColor: \"green\",\n              lineColor: \"lightgreen\",\n              placeholderColor: \"darkgreen\",\n            }}\n          />\n          <div style={{ marginTop: 20 }}>This text will be covered!</div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}